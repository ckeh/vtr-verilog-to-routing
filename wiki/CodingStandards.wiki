#summary VTR Coding Standards

= C Coding Standards for VTR =

==Naming==
 
1. Variable Prefixes:
    * Global variables shall be prefixed with ‘g_’
    * Enumeration types shall be prefixed with ‘e_’
    * Typedef types shall be prefixed with ‘t_’
    * Struct types shall be prefixed with ‘s_’

2. Enumerated constants, #define, and #define macros shall be written ALL CAPS.

3. Enumerated constants shall have a common prefix, and when appropriate an ending entry.
<code>
    enum e_interconnect {
    INTERC_COMPLETE, 
    INTERC_DIRECT, 
    INTERC_MUX,
    INTERC_MAX_NUM}; </code>

== File Organization ==
5. Functions Declaration:
 * Functions used by other source files shall be declared in the '.h' file. 
 * Functions used only by the local source shall be declared at the top of the '.c' file and shall be of type 'static'.

6. Variables that are local to a '.c' file should use the 'static' keyword to prevent populating the global namespace.

==Comments==
7. Comments should be provided for:
 * Modules: a broad overview at the beginning
 * Functions: an overview and description of each parameter
 * Data Structures: an overview and description of each member variable
 * Enumeration:  an overview description and if helpful, a description of each value
 * Global variables: describing their function and scope (used in just packing, placement, etc.)

8. Comments should always precede the code described, i.e. before function and structure definitions.

==Style==

9. Global variables should be used very sparingly.  They are best used to share information across multiple separate modules.
<code>
/* Global architecture information */
t_arch * g_arch; </code>

10.	General style preferences (bracket style, parameter spacing, etc.) can be chosen by the user, but should remain consistent throughout the module.